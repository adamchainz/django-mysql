.. _change_db_charset:

=============================
``change_db_charset`` command
=============================

Outputs SQL to convert your database's charset and collation. This is useful for
switching to ``utf8mb4`` to resolve the :ref:`check-w003` warning,
although it supports all collations and charsets your version of MySQL does.

.. code-block:: console

    $ python manage.py change_db_charset
    -- Generated by django_mysql's change_db_charset command on YYYY-MM-DD HH:MM:SS

    -- Previous character set: latin1
    -- Previous collation: latin1_swedish_ci
    ALTER DATABASE `database_name` CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci

    -- Previous character set: latin1
    -- Previous collation: latin1_swedish_ci
    ALTER TABLE `database_name`.`table_name` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci, CHANGE `text_column` `text_column` VARCHAR(64) NOT NULL CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;

    â€¦

Options
=======

``--alias``
-----------

Select which database to base the changes on. If not given, defaults to
``"default"``.

``--charset``
-------------

Select the charset to convert to. You can select any charset supported by your
database, though it's recommended that you leave this at the default
``utf8mb4``.

``--collation``
---------------

Select the collation to convert to. You can select any charset supported by your
database and charset selection. If not given, this defaults to
``utf8mb4_unicode_ci``.

Limitations
===========

Currently, this command does not support rebuilding composite foreign keys. When
you have two text columns and the charset change makes the index wider than
InnoDB allows (767 bytes), it's ambiguous which column should be truncated.

.. |pt-online-schema-change| replace:: ``pt-online-schema-change``
.. _pt-online-schema-change: https://www.percona.com/doc/percona-toolkit/2.1/pt-online-schema-change.html
